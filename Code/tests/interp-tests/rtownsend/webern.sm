getTransRow :: [Int] -> Int -> [Int]
getTransRow [] _ = []
getTransRow l 1 = ~l
getTransRow l 2 = <>l
getTransRow l 3 = <>(~l)

/*Given a P0 and a pitch class x get the row of type 'typetrans' derived from P0
whose first element is x
For typetrans=0 we get P
							1 we get I
							2 we get R
							3 we get RI */
findRowStartsWith :: [Int] -> Int -> Int -> [Int]
findRowStartsWith [] _ _ = []
findRowStartsWith l x typetrans = if x < 0 || typetrans > 12 then [] else \
						 let transRow = if typetrans == 0 then l else getTransRow l typetrans
						 in if head transRow == x then transRow else \
																	-1 * ((head transRow) - x) ^^ transRow

//Converts single note chords from index x to y-1 into a chord composed of the notes,
//where x is 1st arg and y is 2nd arg
subChord :: Int -> Int -> [Chord] -> [Chord]
subChord _ _ [] = []
subChord 0 y l  = let take :: Int -> [[a]] -> [a]
											take 0 _ = []
											take _ [] = []
											take x [l]:rest = l : (take (x - 1) rest)
											r = take y l
											b = drop y l
									in r : b
subChord x y c:rest = c : (subChord (x - 1) (y - 1) rest)

interweaveRest :: [Chord] -> [Chord]
interweaveRest [] = []
interweaveRest l:rest = l : [(-1,0)$8] : (interweaveRest rest)


P0 = [0,8,7,11,10,9,3,1,4,2,6,5]
RP3 = <>(3 ^^ P0)
RI3 = <>(3 ^^ ~P0)

main = let firstrows = crossOver 9 RP3 RI3 
					 t1 = head firstrows
					 t2 = head (tail firstrows)
					 reg = [0,1,2,3,2,1,0,1,2,3,2,1]
					 durations = [8,8,4,16,16,8,8,8,8,8,8,16]
					 section1 = subChord 5 7 (makeNotes t1 reg durations)
					 section2 = subChord 5 7 (makeNotes t2 (<>reg) durations)
			 in let t3 = findRowStartsWith P0 (last t1) 2
			 				t4 = findRowStartsWith P0 (last t2) 3
							secrows = crossOver 5 t3 t4
			 in let t3 = tail (head secrows) /*First note of this row is last note of previous row! */
							t4 = tail (head (tail secrows)) /* Same for this row */
							durations	= [16,4,16,16,8,8,8,8,8,8,8]
							newsection1 = section1 ++ [subChord 4 6 (makeNotes t3 (tail reg) durations)]
							newsection2 = section2 ++ [subChord 4 6 (makeNotes t4 (tail (<>reg)) durations)]
			 in let firstRepeat1 = newsection1 ++ newsection1
			 				firstRepeat2 = newsection2 ++ newsection2
			 in	let t5 = findRowStartsWith P0 (last t3) 3
			 				t6 = findRowStartsWith P0 (last t4) 2
							thirdrows = crossOver 11 t5 t6
			 in let t5 = tail (head thirdrows)
							t6 = tail (head (tail thirdrows))
							durations = [8,8,8,4,8,8,8,8,8,8,16]
							section1 = subChord 4 6 (makeNotes t5 (tail reg) durations)
							section2 = subChord 4 6 (makeNotes t6 (tail (<>reg)) durations)
			 in let t7 = findRowStartsWith P0 (last t5) 3
			 				t8 = findRowStartsWith P0 (last t6) 2
							fourthrows = CorssOver 2 t7 t8
			 in let t7 = tail (head fourthrows)
							t8 = tail (head (tail fourthrows))
							durations = [16,16,16,8,8,8,8,8,16,16,8]
							newsection1 = section1 ++ [subChord 4 6 (makeNotes t7 (tail reg) durations)]
							newsection2 = section2 ++ [subChord 4 6 (makeNotes t8 (tail (<>reg)) duration)]	
							secRepeat1 = newsection1 ++ newsection1
							secRepeat2 = newsection2 ++ newsection2
			 in [interweaveRest (firstRepeat1 ++ secRepeat1), interweaveRest (firstRepeat2 ++ secRepeat2)]
