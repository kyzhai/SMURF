OBJ=ast.cmo \
	sast.cmo \
	semanalyze.cmo \
	scanner.cmo \
	parser.cmo \
	util.cmo \
	test.cmo \
	smurf.cmo \
    interpreter.cmo \
    toplevel.cmo

SMURF=smurf

$(SMURF): $(OBJ)
	ocamlc -o test util.cmo parser.cmo scanner.cmo ast.cmo test.cmo
	ocamlc -o smurf util.cmo parser.cmo scanner.cmo ast.cmo sast.cmo semanalyze.cmo smurf.cmo 
	ocamlc -o interp util.cmo parser.cmo scanner.cmo ast.cmo sast.cmo semanalyze.cmo interpreter.cmo toplevel.cmo 

.SUFFIXES: .ml .cmo .cmi .mll .mly .mli
.PRECIOUS: %.ml %.mli %.cmo

.ml.cmo:
	ocamlc -c $<

.mli.cmi:
	ocamlc -c $<
    
.mll.ml:
	ocamllex $<

.mly.ml:
	ocamlyacc -v $<

.mly.mli:
	ocamlyacc -v $<

clean:
	rm -f *.cmi *.cmo parser.ml scanner.ml *.output parser.mli test smurf interp


test: $(SMURF)
	./testall.sh

# Generated by ocamldep
ast.cmo :
ast.cmx :
bytecode.cmo :
bytecode.cmx :
interpreter.cmo : util.cmo semanalyze.cmo scanner.cmo sast.cmo parser.cmi ast.cmo
interpreter.cmx : util.cmx semanalyze.cmx scanner.cmx sast.cmx parser.cmx ast.cmx
parser.cmo : util.cmo ast.cmo parser.cmi
parser.cmx : util.cmx ast.cmx parser.cmi
parser.cmi : ast.cmo
sast.cmo : util.cmo ast.cmo
sast.cmx : util.cmx ast.cmx
scanner.cmo : parser.cmi
scanner.cmx : parser.cmx
semanalyze.cmo : util.cmo sast.cmo ast.cmo
semanalyze.cmx : util.cmx sast.cmx ast.cmx
smurf.cmo : util.cmo semanalyze.cmo scanner.cmo sast.cmo parser.cmi
smurf.cmx : util.cmx semanalyze.cmx scanner.cmx sast.cmx parser.cmx
test.cmo : scanner.cmo parser.cmi ast.cmo
test.cmx : scanner.cmx parser.cmx ast.cmx
util.cmo :
util.cmx :
toplevel.cmo : util.cmo interpreter.cmo 
toplevel.cmx : util.cmx interpreter.cmx

