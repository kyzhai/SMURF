type token =
  | NL
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | OTHERWISE
  | INT
  | BOOL
  | EOF
  | BEAT
  | NOTE
  | CHORD
  | SYSTEM
  | MAIN
  | RANDOM
  | PRINT
  | PERIOD
  | DOLLAR
  | LPAREN
  | RPAREN
  | LLIST
  | RLIST
  | COMMA
  | TYPE
  | FUNC
  | GUARD
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | BTIMES
  | BDIV
  | BPLUS
  | BMINUS
  | PCPLUS
  | PCMINUS
  | EQ
  | NOT
  | AND
  | OR
  | LT
  | GT
  | LE
  | GE
  | BLT
  | BGT
  | BLE
  | BGE
  | CONCAT
  | CONS
  | BIND
  | INV
  | RET
  | TRANS
  | WILD
  | LITERAL of (int)
  | BOOLEAN of (bool)
  | VARIABLE of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast
   open Util
# 69 "parser.ml"
let yytransl_const = [|
  257 (* NL *);
  258 (* LET *);
  259 (* IN *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* OTHERWISE *);
  264 (* INT *);
  265 (* BOOL *);
    0 (* EOF *);
  266 (* BEAT *);
  267 (* NOTE *);
  268 (* CHORD *);
  269 (* SYSTEM *);
  270 (* MAIN *);
  271 (* RANDOM *);
  272 (* PRINT *);
  273 (* PERIOD *);
  274 (* DOLLAR *);
  275 (* LPAREN *);
  276 (* RPAREN *);
  277 (* LLIST *);
  278 (* RLIST *);
  279 (* COMMA *);
  280 (* TYPE *);
  281 (* FUNC *);
  282 (* GUARD *);
  283 (* PLUS *);
  284 (* MINUS *);
  285 (* TIMES *);
  286 (* DIV *);
  287 (* MOD *);
  288 (* BTIMES *);
  289 (* BDIV *);
  290 (* BPLUS *);
  291 (* BMINUS *);
  292 (* PCPLUS *);
  293 (* PCMINUS *);
  294 (* EQ *);
  295 (* NOT *);
  296 (* AND *);
  297 (* OR *);
  298 (* LT *);
  299 (* GT *);
  300 (* LE *);
  301 (* GE *);
  302 (* BLT *);
  303 (* BGT *);
  304 (* BLE *);
  305 (* BGE *);
  306 (* CONCAT *);
  307 (* CONS *);
  308 (* BIND *);
  309 (* INV *);
  310 (* RET *);
  311 (* TRANS *);
  312 (* WILD *);
    0|]

let yytransl_block = [|
  313 (* LITERAL *);
  314 (* BOOLEAN *);
  315 (* VARIABLE *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\002\000\
\003\000\003\000\004\000\004\000\004\000\004\000\004\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
\006\000\008\000\008\000\009\000\009\000\009\000\009\000\009\000\
\009\000\010\000\010\000\010\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\013\000\013\000\
\014\000\014\000\014\000\014\000\011\000\011\000\012\000\012\000\
\015\000\015\000\000\000"

let yylen = "\002\000\
\000\000\001\000\001\000\002\000\002\000\003\000\001\000\002\000\
\001\000\003\000\003\000\003\000\003\000\004\000\003\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\001\000\003\000\
\003\000\001\000\002\000\001\000\001\000\001\000\001\000\003\000\
\003\000\000\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\002\000\
\002\000\007\000\006\000\003\000\004\000\001\000\002\000\001\000\
\001\000\001\000\001\000\003\000\001\000\002\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\007\000\000\000\000\000\083\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\031\000\028\000\029\000\
\030\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\073\000\075\000\074\000\
\000\000\000\000\072\000\000\000\000\000\016\000\017\000\019\000\
\018\000\020\000\021\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\000\000\071\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\000\000\068\000\000\000\
\078\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\024\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\006\000\007\000\008\000\009\000\046\000\047\000\033\000\018\000\
\019\000\037\000\089\000\058\000\034\000\035\000\059\000"

let yysindex = "\005\000\
\028\255\000\000\000\000\222\254\067\255\000\000\030\255\029\255\
\000\000\088\255\072\255\038\255\088\255\000\000\000\000\000\000\
\000\000\180\255\239\254\000\000\029\255\030\255\028\255\088\255\
\088\255\088\255\088\255\088\255\088\255\000\000\000\000\000\000\
\103\005\237\254\000\000\239\254\004\255\000\000\000\000\000\000\
\000\000\000\000\000\000\038\255\000\000\069\255\074\255\103\005\
\088\255\239\254\072\255\030\255\000\000\051\255\132\255\252\004\
\103\005\079\255\083\255\173\005\091\255\091\255\091\255\088\255\
\088\255\088\255\088\255\088\255\088\255\088\255\088\255\088\255\
\088\255\088\255\088\255\088\255\088\255\088\255\088\255\088\255\
\088\255\088\255\088\255\088\255\088\255\088\255\088\255\088\255\
\000\000\088\255\000\000\000\000\072\255\110\255\038\255\038\255\
\103\005\239\254\088\255\088\255\000\000\088\255\000\000\088\255\
\000\000\085\255\085\255\254\254\254\254\254\254\254\254\254\254\
\085\255\085\255\085\255\085\255\208\005\173\005\138\005\208\005\
\208\005\208\005\208\005\208\005\208\005\208\005\208\005\208\005\
\208\005\091\255\032\005\239\254\000\000\000\000\000\000\103\005\
\179\255\068\005\103\005\088\255\092\255\103\005\088\255\091\255"

let yyrindex = "\000\000\
\113\000\000\000\000\000\000\000\000\000\000\000\013\000\014\000\
\000\000\000\000\010\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\106\000\000\000\016\000\017\000\130\255\000\000\
\000\000\112\255\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\001\000\000\000\014\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\008\000\011\000\
\000\000\157\000\000\000\019\000\000\000\000\000\000\000\000\000\
\035\255\000\000\113\255\186\004\103\000\154\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\099\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\002\107\002\205\000\000\001\054\001\105\001\156\001\
\158\002\209\002\004\003\055\003\106\003\230\004\236\004\118\003\
\167\003\179\003\228\003\240\003\033\004\063\004\094\004\125\004\
\174\004\207\001\000\000\082\255\000\000\000\000\000\000\062\002\
\000\000\000\000\089\255\000\000\000\000\116\002\000\000\002\002"

let yygindex = "\000\000\
\115\000\020\000\136\000\239\255\216\255\000\000\252\255\000\000\
\248\255\000\000\081\000\000\000\000\000\114\000\000\000"

let yytablesize = 1799
let yytable = "\090\000\
\070\000\015\000\036\000\094\000\053\000\001\000\011\000\012\000\
\048\000\050\000\013\000\014\000\002\000\003\000\063\000\004\000\
\005\000\010\000\006\000\055\000\056\000\057\000\060\000\061\000\
\062\000\092\000\093\000\022\000\003\000\003\000\020\000\034\000\
\034\000\051\000\053\000\035\000\035\000\030\000\031\000\032\000\
\052\000\004\000\098\000\004\000\097\000\038\000\039\000\040\000\
\041\000\042\000\043\000\077\000\088\000\099\000\134\000\135\000\
\081\000\081\000\044\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\119\000\120\000\121\000\122\000\123\000\124\000\125\000\126\000\
\127\000\128\000\129\000\130\000\132\000\131\000\005\000\011\000\
\005\000\023\000\012\000\024\000\011\000\095\000\136\000\137\000\
\045\000\138\000\096\000\139\000\103\000\063\000\063\000\036\000\
\036\000\104\000\025\000\063\000\026\000\143\000\082\000\082\000\
\001\000\066\000\067\000\068\000\069\000\070\000\013\000\033\000\
\033\000\033\000\014\000\015\000\016\000\017\000\027\000\014\000\
\015\000\016\000\017\000\133\000\001\000\079\000\080\000\142\000\
\100\000\054\000\144\000\088\000\028\000\029\000\021\000\105\000\
\030\000\031\000\032\000\091\000\063\000\000\000\033\000\000\000\
\000\000\064\000\033\000\033\000\033\000\033\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\000\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\000\000\
\140\000\000\000\088\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\039\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\000\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\000\000\049\000\
\000\000\088\000\000\000\014\000\015\000\016\000\017\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\000\000\070\000\015\000\070\000\015\000\070\000\070\000\011\000\
\012\000\011\000\012\000\013\000\014\000\013\000\014\000\002\000\
\003\000\070\000\004\000\005\000\070\000\006\000\070\000\070\000\
\000\000\000\000\000\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\000\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\077\000\041\000\077\000\070\000\
\077\000\077\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\000\000\077\000\077\000\000\000\000\000\000\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\000\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\063\000\
\043\000\063\000\077\000\063\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\063\000\000\000\063\000\063\000\026\000\000\000\
\000\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\000\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\064\000\042\000\064\000\026\000\064\000\064\000\
\000\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\064\000\000\000\064\000\
\064\000\027\000\000\000\000\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\000\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\039\000\061\000\039\000\
\027\000\039\000\039\000\000\000\027\000\027\000\027\000\027\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\000\000\039\000\039\000\000\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\040\000\066\000\040\000\000\000\040\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\040\000\040\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\000\000\037\000\000\000\041\000\000\000\
\041\000\000\000\041\000\041\000\000\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\000\000\041\000\041\000\000\000\000\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\043\000\038\000\043\000\000\000\043\000\043\000\000\000\
\000\000\000\000\000\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\043\000\043\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\000\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\042\000\044\000\042\000\000\000\
\042\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\042\000\042\000\000\000\000\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\061\000\
\045\000\061\000\000\000\061\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\000\000\000\061\000\061\000\000\000\000\000\
\000\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\000\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\066\000\046\000\066\000\000\000\066\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\066\000\
\066\000\000\000\000\000\000\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\000\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\037\000\047\000\037\000\
\000\000\037\000\037\000\000\000\000\000\000\000\069\000\000\000\
\069\000\000\000\069\000\069\000\000\000\000\000\000\000\000\000\
\037\000\000\000\037\000\037\000\000\000\000\000\000\000\037\000\
\037\000\069\000\000\000\069\000\069\000\000\000\037\000\037\000\
\037\000\037\000\037\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\000\000\058\000\000\000\038\000\000\000\038\000\000\000\038\000\
\038\000\000\000\000\000\000\000\067\000\048\000\067\000\000\000\
\067\000\067\000\000\000\000\000\000\000\000\000\038\000\000\000\
\038\000\038\000\000\000\000\000\000\000\038\000\038\000\067\000\
\000\000\067\000\067\000\000\000\038\000\038\000\038\000\038\000\
\038\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\044\000\000\000\
\044\000\000\000\044\000\044\000\000\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\050\000\044\000\044\000\000\000\000\000\000\000\
\044\000\044\000\000\000\000\000\000\000\000\000\000\000\044\000\
\044\000\044\000\044\000\044\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\045\000\000\000\045\000\000\000\045\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\000\045\000\000\000\045\000\045\000\
\000\000\000\000\000\000\045\000\045\000\000\000\000\000\052\000\
\000\000\000\000\045\000\045\000\045\000\045\000\045\000\000\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\046\000\000\000\046\000\000\000\
\046\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\046\000\046\000\000\000\000\000\000\000\046\000\046\000\
\053\000\000\000\000\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\047\000\
\000\000\047\000\000\000\047\000\047\000\000\000\054\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\000\000\047\000\047\000\000\000\000\000\
\000\000\047\000\047\000\000\000\000\000\000\000\000\000\000\000\
\047\000\047\000\047\000\047\000\047\000\055\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\058\000\000\000\058\000\000\000\058\000\058\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\
\048\000\000\000\048\000\048\000\059\000\058\000\000\000\058\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\048\000\048\000\000\000\000\000\058\000\
\000\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\048\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\049\000\
\000\000\049\000\000\000\049\000\049\000\060\000\000\000\000\000\
\000\000\000\000\000\000\050\000\000\000\050\000\000\000\050\000\
\050\000\062\000\049\000\000\000\049\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\000\000\
\050\000\050\000\000\000\000\000\049\000\000\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\050\000\000\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\051\000\056\000\051\000\000\000\
\051\000\051\000\000\000\057\000\000\000\000\000\000\000\000\000\
\052\000\000\000\052\000\000\000\052\000\052\000\000\000\051\000\
\000\000\051\000\051\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\052\000\052\000\000\000\
\000\000\051\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\052\000\000\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\053\000\000\000\053\000\000\000\053\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\053\000\053\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\000\000\054\000\000\000\054\000\054\000\000\000\053\000\000\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\054\000\000\000\054\000\054\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\055\000\000\000\055\000\055\000\054\000\000\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\000\000\055\000\000\000\055\000\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\000\000\059\000\
\000\000\059\000\059\000\055\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\000\000\
\059\000\000\000\059\000\059\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\000\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\060\000\000\000\
\060\000\000\000\060\000\060\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\062\000\000\000\062\000\062\000\
\000\000\060\000\000\000\060\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\062\000\000\000\062\000\
\062\000\000\000\000\000\060\000\000\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\000\000\
\000\000\062\000\062\000\000\000\000\000\000\000\056\000\000\000\
\056\000\000\000\056\000\056\000\057\000\000\000\057\000\000\000\
\057\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\000\000\056\000\056\000\000\000\000\000\057\000\
\000\000\057\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\056\000\056\000\101\000\
\000\000\000\000\102\000\000\000\057\000\000\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\000\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\000\000\
\063\000\000\000\088\000\101\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\000\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\000\000\063\000\000\000\088\000\141\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\000\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\063\000\
\000\000\000\000\088\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\000\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\063\000\000\000\000\000\088\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\000\000\076\000\000\000\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\063\000\000\000\000\000\
\088\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\000\000\000\000\000\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\063\000\000\000\000\000\088\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\086\000\087\000\000\000\000\000\000\000\088\000"

let yycheck = "\019\001\
\000\000\000\000\011\000\044\000\022\000\001\000\000\000\000\000\
\013\000\018\000\000\000\000\000\000\000\000\000\017\001\000\000\
\000\000\052\001\000\000\024\000\025\000\026\000\027\000\028\000\
\029\000\022\001\023\001\008\000\001\001\001\001\001\001\022\001\
\023\001\051\001\052\000\022\001\023\001\057\001\058\001\059\001\
\021\000\014\001\051\000\014\001\049\000\008\001\009\001\010\001\
\011\001\012\001\013\001\000\000\055\001\003\001\095\000\096\000\
\022\001\023\001\021\001\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\093\000\090\000\059\001\021\001\
\059\001\002\001\024\001\004\001\021\001\025\001\099\000\100\000\
\059\001\102\000\025\001\104\000\022\001\017\001\000\000\022\001\
\023\001\023\001\019\001\017\001\021\001\018\001\022\001\023\001\
\000\000\029\001\030\001\031\001\032\001\033\001\052\001\021\001\
\022\001\023\001\056\001\057\001\058\001\059\001\039\001\056\001\
\057\001\058\001\059\001\022\001\003\001\022\001\022\001\140\000\
\005\001\023\000\143\000\055\001\053\001\054\001\007\000\063\000\
\057\001\058\001\059\001\034\000\017\001\255\255\052\001\255\255\
\255\255\000\000\056\001\057\001\058\001\059\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\006\001\255\255\055\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\000\000\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\255\255\052\001\
\255\255\055\001\255\255\056\001\057\001\058\001\059\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\001\001\001\001\003\001\003\001\005\001\006\001\001\001\
\001\001\003\001\003\001\001\001\001\001\003\001\003\001\003\001\
\003\001\017\001\003\001\003\001\020\001\003\001\022\001\023\001\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\001\001\000\000\003\001\055\001\
\005\001\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\255\255\022\001\023\001\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\001\001\
\000\000\003\001\055\001\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\022\001\023\001\021\001\255\255\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\001\001\000\000\003\001\052\001\005\001\006\001\
\255\255\056\001\057\001\058\001\059\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\255\255\022\001\
\023\001\021\001\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\001\001\000\000\003\001\
\052\001\005\001\006\001\255\255\056\001\057\001\058\001\059\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\255\255\022\001\023\001\255\255\255\255\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\001\001\000\000\003\001\255\255\005\001\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\255\255\022\001\023\001\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\255\255\000\000\255\255\001\001\255\255\
\003\001\255\255\005\001\006\001\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\022\001\023\001\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\001\001\000\000\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\001\001\000\000\003\001\255\255\
\005\001\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\255\255\022\001\023\001\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\001\001\
\000\000\003\001\255\255\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\022\001\023\001\255\255\255\255\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\001\001\000\000\003\001\255\255\005\001\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\255\255\022\001\
\023\001\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\001\001\000\000\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\020\001\255\255\022\001\023\001\255\255\255\255\255\255\027\001\
\028\001\020\001\255\255\022\001\023\001\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\255\255\000\000\255\255\001\001\255\255\003\001\255\255\005\001\
\006\001\255\255\255\255\255\255\001\001\000\000\003\001\255\255\
\005\001\006\001\255\255\255\255\255\255\255\255\020\001\255\255\
\022\001\023\001\255\255\255\255\255\255\027\001\028\001\020\001\
\255\255\022\001\023\001\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\001\001\255\255\
\003\001\255\255\005\001\006\001\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\000\000\022\001\023\001\255\255\255\255\255\255\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\001\001\255\255\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\027\001\028\001\255\255\255\255\000\000\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\001\001\255\255\003\001\255\255\
\005\001\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\255\255\022\001\023\001\255\255\255\255\255\255\027\001\028\001\
\000\000\255\255\255\255\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\001\001\
\255\255\003\001\255\255\005\001\006\001\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\022\001\023\001\255\255\255\255\
\255\255\027\001\028\001\255\255\255\255\255\255\255\255\255\255\
\034\001\035\001\036\001\037\001\038\001\000\000\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\001\001\255\255\003\001\255\255\005\001\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\005\001\006\001\000\000\020\001\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\022\001\023\001\255\255\255\255\038\001\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\001\001\
\255\255\003\001\255\255\005\001\006\001\000\000\255\255\255\255\
\255\255\255\255\255\255\001\001\255\255\003\001\255\255\005\001\
\006\001\000\000\020\001\255\255\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\020\001\255\255\
\022\001\023\001\255\255\255\255\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\001\001\000\000\003\001\255\255\
\005\001\006\001\255\255\000\000\255\255\255\255\255\255\255\255\
\001\001\255\255\003\001\255\255\005\001\006\001\255\255\020\001\
\255\255\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\255\255\022\001\023\001\255\255\
\255\255\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\038\001\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\001\001\255\255\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\003\001\255\255\005\001\006\001\255\255\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\020\001\255\255\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\005\001\006\001\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\020\001\255\255\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\003\001\
\255\255\005\001\006\001\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\020\001\255\255\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\001\001\255\255\
\003\001\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\005\001\006\001\
\255\255\020\001\255\255\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\255\255\022\001\
\023\001\255\255\255\255\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\255\255\040\001\041\001\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\005\001\006\001\001\001\255\255\003\001\255\255\
\005\001\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\022\001\023\001\255\255\255\255\020\001\
\255\255\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\017\001\040\001\041\001\020\001\
\255\255\255\255\023\001\255\255\041\001\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\017\001\255\255\055\001\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\255\255\017\001\255\255\055\001\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\017\001\
\255\255\255\255\055\001\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\017\001\255\255\255\255\055\001\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\255\255\040\001\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\017\001\255\255\255\255\
\055\001\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\255\255\255\255\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\017\001\255\255\255\255\055\001\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\051\001\255\255\255\255\255\255\055\001"

let yynames_const = "\
  NL\000\
  LET\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  OTHERWISE\000\
  INT\000\
  BOOL\000\
  EOF\000\
  BEAT\000\
  NOTE\000\
  CHORD\000\
  SYSTEM\000\
  MAIN\000\
  RANDOM\000\
  PRINT\000\
  PERIOD\000\
  DOLLAR\000\
  LPAREN\000\
  RPAREN\000\
  LLIST\000\
  RLIST\000\
  COMMA\000\
  TYPE\000\
  FUNC\000\
  GUARD\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  BTIMES\000\
  BDIV\000\
  BPLUS\000\
  BMINUS\000\
  PCPLUS\000\
  PCMINUS\000\
  EQ\000\
  NOT\000\
  AND\000\
  OR\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  BLT\000\
  BGT\000\
  BLE\000\
  BGE\000\
  CONCAT\000\
  CONS\000\
  BIND\000\
  INV\000\
  RET\000\
  TRANS\000\
  WILD\000\
  "

let yynames_block = "\
  LITERAL\000\
  BOOLEAN\000\
  VARIABLE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                                    ( [] )
# 757 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'newlines) in
    Obj.repr(
# 41 "parser.mly"
                                    ( [] )
# 764 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decs) in
    Obj.repr(
# 42 "parser.mly"
                                    ( List.rev _1 )
# 771 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'newlines) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decs) in
    Obj.repr(
# 43 "parser.mly"
                                    ( List.rev _2 )
# 779 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'newlines) in
    Obj.repr(
# 44 "parser.mly"
                                    ( List.rev _1 )
# 787 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'newlines) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'decs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'newlines) in
    Obj.repr(
# 45 "parser.mly"
                                    ( List.rev _2 )
# 796 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
                                    ( )
# 802 "parser.ml"
               : 'newlines))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'newlines) in
    Obj.repr(
# 49 "parser.mly"
                                    ( )
# 809 "parser.ml"
               : 'newlines))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 52 "parser.mly"
                                    ( [_1] )
# 816 "parser.ml"
               : 'decs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'newlines) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 53 "parser.mly"
                                    ( _3 :: _1 )
# 825 "parser.ml"
               : 'decs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 56 "parser.mly"
                                    ( Tysig(_1, [_3]) )
# 833 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'func_types) in
    Obj.repr(
# 57 "parser.mly"
                                    ( Tysig(_1, List.rev _3) )
# 841 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                                    ( Vardef(_1, _3) )
# 849 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'patterns) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                                    ( Funcdec{ fname = _1; args = List.rev _2; value = _4 } )
# 858 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                                    ( Main(_3) )
# 865 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                                    ( TInt )
# 871 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
                                    ( TBool )
# 877 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                                    ( TNote )
# 883 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
                                    ( TBeat )
# 889 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
                                    ( TChord )
# 895 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                                    ( TSystem )
# 901 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'types) in
    Obj.repr(
# 70 "parser.mly"
                                    ( TList(_2) )
# 908 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
                                    ( TPoly(_1) )
# 915 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'types) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 75 "parser.mly"
                                    ( _3 :: [_1] )
# 923 "parser.ml"
               : 'func_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'func_types) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 76 "parser.mly"
                                    ( _3 :: _1 )
# 931 "parser.ml"
               : 'func_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 79 "parser.mly"
                                    ( [_1] )
# 938 "parser.ml"
               : 'patterns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'patterns) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 80 "parser.mly"
                                    ( _2 :: _1 )
# 946 "parser.ml"
               : 'patterns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 83 "parser.mly"
                                    ( Patconst(_1) )
# 953 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 84 "parser.mly"
                                    ( Patbool(_1) )
# 960 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 85 "parser.mly"
                                    ( Patvar(_1) )
# 967 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                                    ( Patwild )
# 973 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comma_patterns) in
    Obj.repr(
# 87 "parser.mly"
                                    ( Patcomma(List.rev _2) )
# 980 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 88 "parser.mly"
                                    ( Patcons(_1, _3) )
# 988 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                                    ( [] )
# 994 "parser.ml"
               : 'comma_patterns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 92 "parser.mly"
                                    ( [_1] )
# 1001 "parser.ml"
               : 'comma_patterns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comma_patterns) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 93 "parser.mly"
                                    ( _3 :: _1 )
# 1009 "parser.ml"
               : 'comma_patterns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                            ( Binop(_1, Add, _3) )
# 1017 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                            ( Binop(_1, Sub, _3) )
# 1025 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                            ( Binop(_1, Mul, _3) )
# 1033 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                            ( Binop(_1, Div, _3) )
# 1041 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                            ( Binop(_1, Mod, _3) )
# 1049 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                            ( Binop(_1, BeatDiv, _3) )
# 1057 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                            ( Binop(_1, BeatMul, _3) )
# 1065 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                            ( Binop(_1, BeatAdd, _3) )
# 1073 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                            ( Binop(_1, BeatSub, _3) )
# 1081 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                            ( Binop(_1, PCAdd, _3) )
# 1089 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                            ( Binop(_1, PCSub, _3) )
# 1097 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                            ( Binop(_1, Less, _3) )
# 1105 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                            ( Binop(_1, Greater, _3) )
# 1113 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                            ( Binop(_1, Leq, _3) )
# 1121 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                            ( Binop(_1, Geq, _3) )
# 1129 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                            ( Binop(_1, BeatLess, _3) )
# 1137 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                            ( Binop(_1, BeatGreater, _3) )
# 1145 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                            ( Binop(_1, BeatLeq, _3) )
# 1153 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                            ( Binop(_1, BeatGeq, _3) )
# 1161 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                            ( Binop(_1, And, _3) )
# 1169 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                            ( Binop(_1, Or, _3) )
# 1177 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                            ( Binop(_1, BoolEq, _3) )
# 1185 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                            ( Binop(_1, Concat, _3) )
# 1193 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                            ( Binop(_1, Cons, _3) )
# 1201 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                            ( Binop(_1, Trans, _3) )
# 1209 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                            ( Prefix(Not, _2) )
# 1216 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                            ( Prefix(Inv, _2) )
# 1223 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                            ( Prefix(Retro, _2) )
# 1230 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dots) in
    Obj.repr(
# 128 "parser.mly"
                            ( Beat(_1, _2) )
# 1238 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                            ( Note(_2, _4, _7) )
# 1247 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                            ( If(_2, _4, _6) )
# 1256 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 139 "parser.mly"
                            ( match _2 with 
                                [] -> List(_2)
                              | _ -> (match (List.hd _2) with
                                    Note(_,_,_) -> Chord(_2)
                                  | Chord(_) -> System(_2)
                                  | _ -> List(_2)) )
# 1268 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.program) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                            ( Let(_2, _4) )
# 1276 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'callexpr) in
    Obj.repr(
# 147 "parser.mly"
                            ( _1 )
# 1283 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'callexpr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cexpr) in
    Obj.repr(
# 150 "parser.mly"
                            ( Call(_1,_2) )
# 1291 "parser.ml"
               : 'callexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cexpr) in
    Obj.repr(
# 151 "parser.mly"
                            ( _1 )
# 1298 "parser.ml"
               : 'callexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 154 "parser.mly"
                            ( Literal(_1) )
# 1305 "parser.ml"
               : 'cexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 155 "parser.mly"
                            ( Variable(_1) )
# 1312 "parser.ml"
               : 'cexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 156 "parser.mly"
                            ( Boolean(_1) )
# 1319 "parser.ml"
               : 'cexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                            ( _2 )
# 1326 "parser.ml"
               : 'cexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
                  ( 1 )
# 1332 "parser.ml"
               : 'dots))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dots) in
    Obj.repr(
# 161 "parser.mly"
                  ( _2+1 )
# 1339 "parser.ml"
               : 'dots))
; (fun __caml_parser_env ->
    Obj.repr(
# 164 "parser.mly"
                   ( [] )
# 1345 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list_back) in
    Obj.repr(
# 165 "parser.mly"
                   ( List.rev _1 )
# 1352 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                               ( [_1] )
# 1359 "parser.ml"
               : 'expr_list_back))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list_back) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                               ( _3 :: _1 )
# 1367 "parser.ml"
               : 'expr_list_back))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
