### Starting build.
# Target: test.ml.depends, tags: { extension:ml, file:test.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep -modules test.ml > test.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep -modules ast.ml > ast.ml.depends
# Target: parser.mly, tags: { extension:mly, file:parser.mly, ocaml, ocamlyacc, parser, quiet }
/usr/local/bin/ocamlyacc parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep -modules parser.mli > parser.mli.depends
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc -c -o ast.cmo ast.ml
# Target: scanner.mll, tags: { extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet }
/usr/local/bin/ocamllex -q scanner.mll
# Target: scanner.ml.depends, tags: { extension:ml, file:scanner.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep -modules scanner.ml > scanner.ml.depends
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc -c -o parser.cmi parser.mli
# Target: scanner.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc -c -o scanner.cmo scanner.ml
# Target: test.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc -c -o test.cmo test.ml
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep -modules parser.ml > parser.ml.depends
# Target: util.ml.depends, tags: { extension:ml, file:util.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep -modules util.ml > util.ml.depends
# Target: util.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:util.cmo, file:util.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc -c -o util.cmo util.ml
# Target: parser.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc -c -o parser.cmo parser.ml
# Target: test.byte, tags: { byte, dont_link_with, extension:byte, file:test.byte, link, ocaml, program, quiet }
/usr/local/bin/ocamlc ast.cmo util.cmo parser.cmo scanner.cmo test.cmo -o test.byte
# Target: smurf.ml.depends, tags: { extension:ml, file:smurf.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep -modules smurf.ml > smurf.ml.depends
# Target: sast.ml.depends, tags: { extension:ml, file:sast.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep -modules sast.ml > sast.ml.depends
# Target: semanalyze.ml.depends, tags: { extension:ml, file:semanalyze.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep -modules semanalyze.ml > semanalyze.ml.depends
# Target: sast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc -c -o sast.cmo sast.ml
# Target: semanalyze.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:semanalyze.cmo, file:semanalyze.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc -c -o semanalyze.cmo semanalyze.ml
# Target: smurf.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:smurf.cmo, file:smurf.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc -c -o smurf.cmo smurf.ml
# Target: smurf.byte, tags: { byte, dont_link_with, extension:byte, file:smurf.byte, link, ocaml, program, quiet }
/usr/local/bin/ocamlc ast.cmo util.cmo parser.cmo sast.cmo scanner.cmo semanalyze.cmo smurf.cmo -o smurf.byte
# Target: toplevel.ml.depends, tags: { extension:ml, file:toplevel.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep -modules toplevel.ml > toplevel.ml.depends
# Target: interpreter.ml.depends, tags: { extension:ml, file:interpreter.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep -modules interpreter.ml > interpreter.ml.depends
# Target: interpreter.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:interpreter.cmo, file:interpreter.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc -c -o interpreter.cmo interpreter.ml
# Target: toplevel.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:toplevel.cmo, file:toplevel.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc -c -o toplevel.cmo toplevel.ml
# Target: toplevel.byte, tags: { byte, dont_link_with, extension:byte, file:toplevel.byte, link, ocaml, program, quiet }
/usr/local/bin/ocamlc ast.cmo util.cmo sast.cmo interpreter.cmo parser.cmo scanner.cmo semanalyze.cmo toplevel.cmo -o toplevel.byte
# Compilation successful.
